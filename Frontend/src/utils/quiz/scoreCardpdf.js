import jsPDF from 'jspdf';
import 'jspdf-autotable';
import hindiFont from '../hindiFont';
import tamilFont from '../Tamil';
import malayalamFont from '../malyalam';

const generateScoreCardPDF = (quizData, isScoreCard = false) => {
  const { score, maxScore, percentage, timeTaken, questions, language } = quizData;
  console.log("Question looks like this", questions);
  const doc = new jsPDF();
  const normalizedLang = (language || 'english').toLowerCase();

  // Font configuration
  const fontConfig = {
    hindi: {
      name: 'NotoSansHindi',
      file: 'NotoSansHindi.ttf',
      content: hindiFont
    },
    tamil: {
      name: 'TamilFont',
      file: 'Tamil.ttf',
      content: tamilFont
    },
    malayalam: {
      name: 'MalyalamFont',
      file: 'Malyalam.ttf',
      content: malayalamFont
    }
  };

  // Load and set font if needed
  if (fontConfig[normalizedLang]) {
    const { name, file, content } = fontConfig[normalizedLang];
    doc.addFileToVFS(file, content);
    doc.addFont(file, name, 'normal');
    doc.setFont(name);
  } else {
    doc.setFont('helvetica');
  }

  // Set default styles
  const primaryColor = [52, 152, 219];
  const successColor = [46, 204, 113];
  const errorColor = [231, 76, 60];
  const textColor = [51, 51, 51];
  const lightGray = [247, 247, 247];

  if (isScoreCard) {
    // Generate Scorecard
    doc.setFontSize(22);
    doc.setTextColor(...primaryColor);
    doc.text('Assessment Score Card', 105, 20, { align: 'center' });

    // Add decorative line
    doc.setDrawColor(...primaryColor);
    doc.setLineWidth(0.5);
    doc.line(20, 25, 190, 25);

    // Score Summary Box
    doc.setFillColor(...lightGray);
    doc.rect(20, 30, 170, 30, 'F');
    doc.setFontSize(14);
    doc.setTextColor(...textColor);
    doc.text(`Score: ${score} / ${maxScore}`, 30, 40);
    doc.text(`Percentage: ${percentage}%`, 30, 48);
    doc.text(`Time Taken: ${formatTime(timeTaken)}`, 110, 40);

    // Questions Table
    const tableColumn = [
      { header: 'No.', dataKey: 'index' },
      { header: 'Question', dataKey: 'question' },
      { header: 'Your Answer', dataKey: 'userAnswer' },
      { header: 'Correct Answer', dataKey: 'correctAnswer' },
      { header: 'Result', dataKey: 'result' }
    ];

    const tableData = questions.map((question, index) => {
      const isCorrect = question.isCorrect;
      return {
        index: index + 1,
        question: question.question,
        userAnswer: question.userAnswer || '-',
        correctAnswer: question.correctAnswer,
        result: isCorrect ? 'Correct' : 'Wrong'
      };
    });

    doc.autoTable({
      columns: tableColumn,
      body: tableData,
      startY: 70,
      styles: { 
        fontSize: 9,
        cellPadding: 4,
        font: fontConfig[normalizedLang]?.name || 'helvetica',
        textColor: textColor,
        valign: 'middle'
      },
      headStyles: {
        fillColor: primaryColor,
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      bodyStyles: {
        alternateRowFill: lightGray
      },
      columnStyles: {
        index: { cellWidth: 10 },
        result: {
          cellWidth: 20,
          halign: 'center',
          fontStyle: 'bold',
          textColor: (row) => row.data.result === 'Correct' ? successColor : errorColor
        }
      },
      margin: { horizontal: 20 },
      theme: 'grid',
      didDrawCell: (data) => {
        // Handle special characters in cells
        if (data.column.dataKey === 'question' || 
            data.column.dataKey === 'userAnswer' || 
            data.column.dataKey === 'correctAnswer') {
          doc.setFont(fontConfig[normalizedLang]?.name || 'helvetica');
        }
      }
    });

    // Explanation Section
    let finalY = doc.lastAutoTable.finalY + 15;
    questions.forEach((question, i) => {
      if (finalY > 250) {
        doc.addPage();
        finalY = 20;
      }

      doc.setFontSize(11);
      doc.setTextColor(...primaryColor);
      doc.text(`Q${i + 1} Explanation:`, 20, finalY);
      
      doc.setFontSize(10);
      doc.setTextColor(...textColor);
      const splitText = doc.splitTextToSize(question.explanation, 170);
      doc.text(splitText, 20, finalY + 7);
      
      finalY += splitText.length * 5 + 15;
      
      // Add separator line
      if (i < questions.length - 1) {
        doc.setDrawColor(200, 200, 200);
        doc.line(20, finalY - 5, 190, finalY - 5);
        finalY += 5;
      }
    });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Quiz App', 105, 285, { align: 'center' });

    doc.save('ScoreCard.pdf');
  } else {
    // Generate Assessment with Options and Answer Key
    doc.setFontSize(22);
    doc.setTextColor(...primaryColor);
    doc.text('Assessment Questions and Answer Key', 105, 20, { align: 'center' });

    // Add decorative line
    doc.setDrawColor(...primaryColor);
    doc.setLineWidth(0.5);
    doc.line(20, 25, 190, 25);

    // Add Questions with Options
    let yPosition = 35;
    const lineHeight = 7;
    const optionIndent = 25;

    questions.forEach((question, index) => {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 30;
      }

      doc.setFontSize(12);
      doc.setTextColor(...textColor);
      doc.text(`${index + 1}. ${question.question}`, 20, yPosition);
      yPosition += lineHeight + 2;

      question.options.forEach((option, optIndex) => {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 30;
        }

        doc.text(`${String.fromCharCode(65 + optIndex)}. ${option}`, optionIndent, yPosition);
        yPosition += lineHeight;
      });

      yPosition += lineHeight;
    });

    // Add Answer Key with better styling
    doc.addPage();
    doc.setFontSize(18);
    doc.setTextColor(...primaryColor);
    doc.text('Answer Key', 105, 20, { align: 'center' });
    doc.setDrawColor(...primaryColor);
    doc.line(20, 25, 190, 25);

    const answerKeyColumns = [
      { header: 'No.', dataKey: 'index' },
      { header: 'Correct Answer', dataKey: 'answer' }
    ];

    const answerKeyData = questions.map((question, index) => ({
      index: index + 1,
      answer: question.correctAnswer
    }));

    doc.autoTable({
      columns: answerKeyColumns,
      body: answerKeyData,
      startY: 35,
      styles: {
        fontSize: 10,
        cellPadding: 5,
        font: fontConfig[normalizedLang]?.name || 'helvetica',
        textColor: textColor
      },
      headStyles: {
        fillColor: primaryColor,
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      bodyStyles: {
        alternateRowFill: lightGray
      },
      columnStyles: {
        index: { cellWidth: 20, halign: 'center' },
        answer: { halign: 'center' }
      },
      margin: { horizontal: 20 },
      theme: 'grid'
    });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Quiz App', 105, 285, { align: 'center' });

    doc.save('Assessment.pdf');
  }
};

function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins} min ${secs} sec`;
}

export default generateScoreCardPDF;